export const handleNetworkError = (status: string) => {
    if (!isNaN(+status)) {
        switch (+status) {
            case 400:
                throw new Error(`üö´ ${status} Bad Request: –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –∑–∞–ø—Ä–æ—Å.`)
            case 401:
                throw new Error(`üîí ${status} Unauthorized: –ù–µ–∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω—ã–π –¥–æ—Å—Ç—É–ø.`)
            case 403:
                throw new Error(`‚õîÔ∏è ${status} Forbidden: –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω.`)
            case 404:
                throw new Error(`üîç ${status} Not Found: –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º—ã–π —Ä–µ—Å—É—Ä—Å –Ω–µ –Ω–∞–π–¥–µ–Ω.`)
            case 429:
                throw new Error(
                    `‚è≥ ${status} Too Many Requests: –°–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ –∑–∞–ø—Ä–æ—Å–æ–≤. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏—Ç–µ.`
                )
            case 500:
                throw new Error(`üõ† ${status} Internal Server Error: –í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞.`)
            default:
                throw new Error(`‚ùì ${status} Unknown Error: –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞.`)
        }
    } else {
        throw new Error('üåê –°–µ—Ç–µ–≤–∞—è –æ—à–∏–±–∫–∞: –ù–µ —É–¥–∞–ª–æ—Å—å –≤—ã–ø–æ–ª–Ω–∏—Ç—å –∑–∞–ø—Ä–æ—Å.')
    }
}
